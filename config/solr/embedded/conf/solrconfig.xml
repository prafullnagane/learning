<?xml version="1.0" encoding="UTF-8" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<!-- For more details about configurations options that may appear in this 
	file, see http://wiki.apache.org/solr/SolrConfigXml. Specifically, the Solr 
	Config can support XInclude, which may make it easier to manage the configuration. 
	See https://issues.apache.org/jira/browse/SOLR-1167 -->
<config>
	<!-- Controls what version of Lucene various components of Solr adhere to. 
		Generally, you want to use the latest version to get all bug fixes and improvements. 
		It is highly recommended that you fully re-index after changing this setting 
		as it can affect both how text is indexed and queried. -->
	<luceneMatchVersion>LUCENE_36</luceneMatchVersion>
	<!-- Set this to 'false' if you want solr to continue working after it has 
		encountered an severe configuration error. In a production environment, you 
		may want solr to keep working even if one handler is mis-configured. You 
		may also set this to false using by setting the system property: -Dsolr.abortOnConfigurationError=false -->
	<abortOnConfigurationError>${solr.abortOnConfigurationError:true}
	</abortOnConfigurationError>

	<!-- Used to specify an alternate directory to hold all index data other 
		than the default ./data under the Solr home. If replication is in use, this 
		should match the replication configuration. -->
	<dataDir>${solr.data.dir:./data/solrfacetsearch}</dataDir>

  <indexConfig>
    <!-- maxFieldLength specifies max number of *tokens* indexed per field. Default: 10000 -->
    <maxFieldLength>10000</maxFieldLength>  
    <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
    <writeLockTimeout>1000</writeLockTimeout>
	<commitLockTimeout>10000</commitLockTimeout>
    <!-- Expert: Enabling compound file will use less files for the index, 
         using fewer file descriptors on the expense of performance decrease. 
         Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
    <useCompoundFile>true</useCompoundFile>

    <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
         indexing for buffering added documents and deletions before they are
         flushed to the Directory.
         maxBufferedDocs sets a limit on the number of documents buffered
         before flushing.
         If both ramBufferSizeMB and maxBufferedDocs is set, then
         Lucene will flush based on whichever limit is hit first.  -->
     <ramBufferSizeMB>32</ramBufferSizeMB> 
    <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

    <!-- Expert: Merge Policy 
         The Merge Policy in Lucene controls how merging of segments is done.
         The default since Solr/Lucene 3.3 is TieredMergePolicy.
         The default since Lucene 2.3 was the LogByteSizeMergePolicy,
         Even older versions of Lucene used LogDocMergePolicy.
      -->
    <!--
        <mergePolicy class="org.apache.lucene.index.TieredMergePolicy">
          <int name="maxMergeAtOnce">10</int>
          <int name="segmentsPerTier">10</int>
        </mergePolicy>
      -->
       
    <!-- Merge Factor
         The merge factor controls how many segments will get merged at a time.
         For TieredMergePolicy, mergeFactor is a convenience parameter which
         will set both MaxMergeAtOnce and SegmentsPerTier at once.
         For LogByteSizeMergePolicy, mergeFactor decides how many new segments
         will be allowed before they are merged into one.
         Default is 10 for both merge policies.
      -->
     
    <mergeFactor>10</mergeFactor>
    

    <!-- Expert: Merge Scheduler
         The Merge Scheduler in Lucene controls how merges are
         performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
         can perform merges in the background using separate threads.
         The SerialMergeScheduler (Lucene 2.2 default) does not.
     -->
    <!-- 
       <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
       -->

    <!-- LockFactory 

         This option specifies which Lucene LockFactory implementation
         to use.
      
         single = SingleInstanceLockFactory - suggested for a
                  read-only index or when there is no possibility of
                  another process trying to modify the index.
         native = NativeFSLockFactory - uses OS native file locking.
                  Do not use when multiple solr webapps in the same
                  JVM are attempting to share a single index.
         simple = SimpleFSLockFactory  - uses a plain file for locking

         Defaults: 'native' is default for Solr3.6 and later, otherwise
                   'simple' is the default

         More details on the nuances of each LockFactory...
         http://wiki.apache.org/lucene-java/AvailableLockFactories
    -->
     <lockType>native</lockType>

    <!-- Unlock On Startup

         If true, unlock any held write or commit locks on startup.
         This defeats the locking mechanism that allows multiple
         processes to safely access a lucene index, and should be used
         with care. Default is "false".

         This is not needed if lock type is 'none' or 'single'
     -->
    
    <unlockOnStartup>false</unlockOnStartup>
      
    
    <!-- Expert: Controls how often Lucene loads terms into memory
         Default is 128 and is likely good for most everyone.
      -->
    <!-- <termIndexInterval>128</termIndexInterval> -->

    <!-- If true, IndexReaders will be reopened (often more efficient)
         instead of closed and then opened. Default: true
      -->

    <reopenReaders>true</reopenReaders>

    <!-- Commit Deletion Policy

         Custom deletion policies can be specified here. The class must
         implement org.apache.lucene.index.IndexDeletionPolicy.

         http://lucene.apache.org/java/3_5_0/api/core/org/apache/lucene/index/IndexDeletionPolicy.html

         The default Solr IndexDeletionPolicy implementation supports
         deleting index commit points on number of commits, age of
         commit point and optimized status.
         
         The latest commit point should always be preserved regardless
         of the criteria.
    -->
    
    <deletionPolicy class="solr.SolrDeletionPolicy">
    
      <!-- The number of commit points to be kept -->
      <str name="maxCommitsToKeep">1</str>
      <!-- The number of optimized commit points to be kept -->
      <str name="maxOptimizedCommitsToKeep">0</str>
      <!--
          Delete all commit points once they have reached the given age.
          Supports DateMathParser syntax e.g.
        -->
      <!--
         <str name="maxCommitAge">30MINUTES</str>
         <str name="maxCommitAge">1DAY</str>
      -->
    
    </deletionPolicy>
    

    <!-- Lucene Infostream
       
         To aid in advanced debugging, Lucene provides an "InfoStream"
         of detailed information when indexing.

         Setting The value to true will instruct the underlying Lucene
         IndexWriter to write its debugging info the specified file
      -->
     <infoStream file="INFOSTREAM.txt">false</infoStream> 
  </indexConfig>

	<!-- Enables JMX if and only if an existing MBeanServer is found, use this 
		if you want to configure JMX through JVM parameters. Remove this to disable 
		exposing Solr configuration and statistics to JMX. If you want to connect 
		to a particular server, specify the agentId e.g. <jmx agentId="myAgent" /> 
		If you want to start a new MBeanServer, specify the serviceUrl e.g <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/> 
		For more details see http://wiki.apache.org/solr/SolrJmx -->
	<!-- <jmx /> -->

	<!-- the default high-performance update handler -->
	<updateHandler class="solr.DirectUpdateHandler2" />

	<!-- Use the following format to specify a custom IndexReaderFactory - allows 
		for alternate IndexReader implementations. ** Experimental Feature ** Please 
		note - Using a custom IndexReaderFactory may prevent certain other features 
		from working. The API to IndexReaderFactory may change without warning or 
		may even be removed from future releases if the problems cannot be resolved. 
		** Features that may not work with custom IndexReaderFactory ** The ReplicationHandler 
		assumes a disk-resident index. Using a custom IndexReader implementation 
		may cause incompatibility with ReplicationHandler and may cause replication 
		to not work correctly. See SOLR-1366 for details. <indexReaderFactory name="IndexReaderFactory" 
		class="package.class"> Parameters as required by the implementation </indexReaderFactory 
		> -->
	<!-- To set the termInfosIndexDivisor, do this: -->
	<!-- <indexReaderFactory name="IndexReaderFactory" class="org.apache.solr.core.StandardIndexReaderFactory"> 
		<int name="termInfosIndexDivisor">12</int> </indexReaderFactory > -->


	<query>
		<!-- Maximum number of clauses in a boolean query... in the past, this 
			affected range or prefix queries that expanded to big boolean queries - built 
			in Solr query parsers no longer create queries with this limitation. An exception 
			is thrown if exceeded. -->
		<maxBooleanClauses>1024</maxBooleanClauses>


		<!-- There are two implementations of cache available for Solr, LRUCache, 
			based on a synchronized LinkedHashMap, and FastLRUCache, based on a ConcurrentHashMap. 
			FastLRUCache has faster gets and slower puts in single threaded operation 
			and thus is generally faster than LRUCache when the hit ratio of the cache 
			is high (> 75%), and may be faster under other scenarios on multi-cpu systems. -->
		<!-- Cache used by SolrIndexSearcher for filters (DocSets), unordered sets 
			of *all* documents that match a query. When a new searcher is opened, its 
			caches may be prepopulated or "autowarmed" using data from caches in the 
			old searcher. autowarmCount is the number of items to prepopulate. For LRUCache, 
			the autowarmed items will be the most recently accessed items. Parameters: 
			class - the SolrCache implementation LRUCache or FastLRUCache size - the 
			maximum number of entries in the cache initialSize - the initial capacity 
			(number of entries) of the cache. (seel java.util.HashMap) autowarmCount 
			- the number of entries to prepopulate from and old cache. -->
		<filterCache class="solr.FastLRUCache" size="512"
			initialSize="512" autowarmCount="0" />

		<!-- Cache used to hold field values that are quickly accessible by document 
			id. The fieldValueCache is created by default even if not configured here. 
			<fieldValueCache class="solr.FastLRUCache" size="512" autowarmCount="128" 
			showItems="32" /> -->

		<!-- queryResultCache caches results of searches - ordered lists of document 
			ids (DocList) based on a query, a sort, and the range of documents requested. -->
		<queryResultCache class="solr.LRUCache" size="512"
			initialSize="512" autowarmCount="0" />

		<!-- documentCache caches Lucene Document objects (the stored fields for 
			each document). Since Lucene internal document ids are transient, this cache 
			will not be autowarmed. -->
		<documentCache class="solr.LRUCache" size="512"
			initialSize="512" autowarmCount="0" />

		<!-- If true, stored fields that are not requested will be loaded lazily. 
			This can result in a significant speed improvement if the usual case is to 
			not load all stored fields, especially if the skipped fields are large compressed 
			text fields. -->
		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<!-- Example of a generic cache. These caches may be accessed by name through 
			SolrIndexSearcher.getCache(),cacheLookup(), and cacheInsert(). The purpose 
			is to enable easy caching of user/application level data. The regenerator 
			argument should be specified as an implementation of solr.search.CacheRegenerator 
			if autowarming is desired. -->
		<!-- <cache name="myUserCache" class="solr.LRUCache" size="4096" initialSize="1024" 
			autowarmCount="1024" regenerator="org.mycompany.mypackage.MyRegenerator" 
			/> -->

		<!-- An optimization that attempts to use a filter to satisfy a search. 
			If the requested sort does not include score, then the filterCache will be 
			checked for a filter matching the query. If found, the filter will be used 
			as the source of document ids, and then the sort will be applied to that. 
			<useFilterForSortedQuery>true</useFilterForSortedQuery> -->

		<!-- An optimization for use with the queryResultCache. When a search is 
			requested, a superset of the requested number of document ids are collected. 
			For example, if a search for a particular query requests matching documents 
			10 through 19, and queryWindowSize is 50, then documents 0 through 49 will 
			be collected and cached. Any further requests in that range can be satisfied 
			via the cache. -->
		<queryResultWindowSize>20</queryResultWindowSize>

		<!-- Maximum number of documents to cache for any entry in the queryResultCache. -->
		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>

		<!-- a newSearcher event is fired whenever a new searcher is being prepared 
			and there is a current searcher handling requests (aka registered). It can 
			be used to prime certain caches to prevent long request times for certain 
			requests. -->
		<!-- QuerySenderListener takes an array of NamedList and executes a local 
			query request for each NamedList in sequence. -->
		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
					<str name="q">*:*</str>
				</lst>
			</arr>
		</listener>

		<!-- a firstSearcher event is fired whenever a new searcher is being prepared 
			but there is no current registered searcher to handle requests or to gain 
			autowarming data from. -->
		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
					<str name="q">*:*</str>
					<str name="spellcheck">true</str>
					<str name="spellcheck.dictionary">en</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="spellcheck">true</str>
					<str name="spellcheck.dictionary">de</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="spellcheck">true</str>
					<str name="spellcheck.dictionary">fr</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="spellcheck">true</str>
					<str name="spellcheck.dictionary">ja</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="spellcheck">true</str>
					<str name="spellcheck.dictionary">zh</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="spellcheck">true</str>
					<str name="spellcheck.dictionary">pt</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<!-- to build suggester dictionary -->
				<lst>
					<str name="q">*:*</str>
					<str name="qt">/suggest</str>
					<str name="spellcheck.dictionary">en</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="qt">/suggest</str>
					<str name="spellcheck.dictionary">de</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="qt">/suggest</str>
					<str name="spellcheck.dictionary">fr</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="qt">/suggest</str>
					<str name="spellcheck.dictionary">ja</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="qt">/suggest</str>
					<str name="spellcheck.dictionary">zh</str>
					<str name="spellcheck.build">true</str>
				</lst>
				<lst>
					<str name="q">*:*</str>
					<str name="qt">/suggest</str>
					<str name="spellcheck.dictionary">pt</str>
					<str name="spellcheck.build">true</str>
				</lst>
			</arr>
		</listener>

		<!-- If a search request comes in and there is no current registered searcher, 
			then immediately register the still warming searcher and use it. If "false" 
			then all requests will block until the first searcher is done warming. -->
		<useColdSearcher>false</useColdSearcher>

		<!-- Maximum number of searchers that may be warming in the background 
			concurrently. An error is returned if this limit is exceeded. Recommend 1-2 
			for read-only slaves, higher for masters w/o cache warming. -->
		<maxWarmingSearchers>2</maxWarmingSearchers>

	</query>

	<!-- Let the dispatch filter handler /select?qt=XXX handleSelect=true will 
		use consistent error handling for /select and /update handleSelect=false 
		will use solr1.1 style error formatting -->
	<requestDispatcher handleSelect="true">
		<!-- Make sure your system has some authentication before enabling remote 
			streaming! -->
		<requestParsers enableRemoteStreaming="true"
			multipartUploadLimitInKB="2048000" />

		<!-- Set HTTP caching related parameters (for proxy caches and clients). 
			To get the behaviour of Solr 1.2 (ie: no caching related headers) use the 
			never304="true" option and do not specify a value for <cacheControl> -->
		<!-- <httpCaching never304="true"> -->
		<httpCaching lastModifiedFrom="openTime" etagSeed="Solr">
			<!-- lastModFrom="openTime" is the default, the Last-Modified value (and 
				validation against If-Modified-Since requests) will all be relative to when 
				the current Searcher was opened. You can change it to lastModFrom="dirLastMod" 
				if you want the value to exactly corrispond to when the physical index was 
				last modified. etagSeed="..." is an option you can change to force the ETag 
				header (and validation against If-None-Match requests) to be differnet even 
				if the index has not changed (ie: when making significant changes to your 
				config file) lastModifiedFrom and etagSeed are both ignored if you use the 
				never304="true" option. -->
			<!-- If you include a <cacheControl> directive, it will be used to generate 
				a Cache-Control header, as well as an Expires header if the value contains 
				"max-age=" By default, no Cache-Control header is generated. You can use 
				the <cacheControl> option even if you have set never304="true" -->
			<!-- <cacheControl>max-age=30, public</cacheControl> -->
		</httpCaching>
	</requestDispatcher>


	<!-- requestHandler plugins... incoming queries will be dispatched to the 
		correct handler based on the path or the qt (query type) param. Names starting 
		with a '/' are accessed with the a path equal to the registered name. Names 
		without a leading '/' are accessed with: http://host/app/select?qt=name If 
		no qt is defined, the requestHandler that declares default="true" will be 
		used. -->
	<requestHandler name="standard" class="solr.SearchHandler" default="true">
		<!-- default values for query parameters -->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="spellcheck.onlyMorePopular">true</str>
			<!-- <int name="rows">10</int> <str name="fl">*</str> <str name="version">2.1</str> -->
		</lst>
		<arr name="last-components">
			<str>spellcheck</str>
		</arr>
	</requestHandler>

	<requestHandler name="/suggest" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="spellcheck">true</str>
			<str name="spellcheck.dictionary">default</str>
			<str name="spellcheck.onlyMorePopular">true</str>
			<str name="spellcheck.count">5</str>
			<str name="spellcheck.collate">true</str>
		</lst>
		<arr name="components">
			<str>suggest</str>
		</arr>
	</requestHandler>
	
	<searchComponent name="suggest" class="solr.SpellCheckComponent">
		<str name="queryAnalyzerFieldType">text_spell</str>
		<lst name="spellchecker">
			<str name="name">default</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">autosuggest_en</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
			<str name="accuracy">0.35</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">de</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">autosuggest_de</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
			<str name="accuracy">0.35</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">en</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">autosuggest_en</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
			<str name="accuracy">0.35</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">fr</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">autosuggest_fr</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
			<str name="accuracy">0.35</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">ja</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">autosuggest_ja</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
			<str name="accuracy">0.35</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">zh</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">autosuggest_zh</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
			<str name="accuracy">0.35</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">pt</str>
			<str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
			<str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
			<str name="field">autosuggest_pt</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
			<str name="accuracy">0.35</str>
		</lst>
	</searchComponent>

	<requestHandler name="/spell" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="spellcheck">true</str>
			<str name="spellcheck.dictionary">default</str>
			<str name="spellcheck.onlyMorePopular">true</str>
			<str name="spellcheck.extendedResults">false</str>
			<str name="spellcheck.count">5</str>
			<str name="spellcheck.collate">true</str>
		</lst>
		<arr name="last-components">
			<str>spellcheck</str>
		</arr>
	</requestHandler>

	<searchComponent name="spellcheck" class="solr.SpellCheckComponent">
		<str name="queryAnalyzerFieldType">text_spell</str>
		<lst name="spellchecker">
			<str name="name">default</str>
			<str name="field">spellcheck_en</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">de</str>
			<str name="field">spellcheck_de</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">en</str>
			<str name="field">spellcheck_en</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">fr</str>
			<str name="field">spellcheck_fr</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">ja</str>
			<str name="field">spellcheck_ja</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">zh</str>
			<str name="field">spellcheck_zh</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
		</lst>
		<lst name="spellchecker">
			<str name="name">pt</str>
			<str name="field">spellcheck_pt</str>
			<str name="buildOnCommit">true</str>
			<str name="buildOnOptimize">true</str>
		</lst>
	</searchComponent>
	
	<!-- A request handler utilizing the spellcheck component. ############################################################################# 
		NOTE: This is purely as an example. The whole purpose of the SpellCheckComponent 
		is to hook it into the request handler that handles (i.e. the standard or 
		dismax SearchHandler) queries such that a separate request is not needed 
		to get suggestions. IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP 
		BELOW IS NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM! ############################################################################# -->

	<!-- Hybris update synonyms request handler -->
	<requestHandler name="updateSynonyms"
		class="de.hybris.platform.solrfacetsearch.ysolr.handlers.UpdateSynonymsRequestHandler" />
	<requestHandler name="updateStopwords"
		class="de.hybris.platform.solrfacetsearch.ysolr.handlers.UpdateStopWordsRequestHandler" />


	<!-- Solr Cell: http://wiki.apache.org/solr/ExtractingRequestHandler -->
	<requestHandler name="/update/extract"
		class="org.apache.solr.handler.extraction.ExtractingRequestHandler"
		startup="lazy">
		<lst name="defaults">
			<!-- All the main content goes into "text"... if you need to return the 
				extracted text or do highlighting, use a stored field. -->
			<str name="fmap.content">text</str>
			<str name="lowernames">true</str>
			<str name="uprefix">ignored_</str>

			<!-- capture link hrefs but ignore div attributes -->
			<str name="captureAttr">true</str>
			<str name="fmap.a">links</str>
			<str name="fmap.div">ignored_</str>
		</lst>
	</requestHandler>

	<!-- Update request handler. Note: Since solr1.1 requestHandlers requires 
		a valid content type header if posted in the body. For example, curl now 
		requires: -H 'Content-type:text/xml; charset=utf-8' The response format differs 
		from solr1.1 formatting and returns a standard error code. To enable solr1.1 
		behavior, remove the /update handler or change its path -->
	<requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />

	<requestHandler name="/update/javabin" class="solr.BinaryUpdateRequestHandler" />

	<!-- Analysis request handler. Since Solr 1.3. Use to return how a document 
		is analyzed. Useful for debugging and as a token server for other types of 
		applications. This is deprecated in favor of the improved DocumentAnalysisRequestHandler 
		and FieldAnalysisRequestHandler <requestHandler name="/analysis" class="solr.AnalysisRequestHandler" 
		/> -->

	<!-- An analysis handler that provides a breakdown of the analysis process 
		of provided docuemnts. This handler expects a (single) content stream with 
		the following format: <docs> <doc> <field name="id">1</field> <field name="name">The 
		Name</field> <field name="text">The Text Value</field> <doc> <doc>...</doc> 
		<doc>...</doc> ... </docs> Note: Each document must contain a field which 
		serves as the unique key. This key is used in the returned response to assoicate 
		an analysis breakdown to the analyzed document. Like the FieldAnalysisRequestHandler, 
		this handler also supports query analysis by sending either an "analysis.query" 
		or "q" request paraemter that holds the query text to be analyized. It also 
		supports the "analysis.showmatch" parameter which when set to true, all field 
		tokens that match the query tokens will be marked as a "match". -->
	<requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler" />

	<!-- RequestHandler that provides much the same functionality as analysis.jsp. 
		Provides the ability to specify multiple field types and field names in the 
		same request and outputs index-time and query-time analysis for each of them. 
		Request parameters are: analysis.fieldname - The field name whose analyzers 
		are to be used analysis.fieldtype - The field type whose analyzers are to 
		be used analysis.fieldvalue - The text for index-time analysis q (or analysis.q) 
		- The text for query time analysis analysis.showmatch (true|false) - When 
		set to true and when query analysis is performed, the produced tokens of 
		the field value analysis will be marked as "matched" for every token that 
		is produces by the query analysis -->
	<requestHandler name="/analysis/field" class="solr.FieldAnalysisRequestHandler" />

	<!-- CSV update handler, loaded on demand -->
	<requestHandler name="/update/csv" class="solr.CSVRequestHandler" startup="lazy" />

	<requestHandler name="/admin/luke" class="org.apache.solr.handler.admin.LukeRequestHandler" />

	<!-- Admin Handlers - This will register all the standard admin RequestHandlers. 
		Adding this single handler is equivalent to registering: <requestHandler 
		name="/admin/luke" class="org.apache.solr.handler.admin.LukeRequestHandler" 
		/> <requestHandler name="/admin/system" class="org.apache.solr.handler.admin.SystemInfoHandler" 
		/> <requestHandler name="/admin/plugins" class="org.apache.solr.handler.admin.PluginInfoHandler" 
		/> <requestHandler name="/admin/threads" class="org.apache.solr.handler.admin.ThreadDumpHandler" 
		/> <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" 
		/> <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" 
		> If you wish to hide files under ${solr.home}/conf, explicitly register 
		the ShowFileRequestHandler using: <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" 
		> <lst name="invariants"> <str name="hidden">synonyms.txt</str> <str name="hidden">anotherfile.txt</str> 
		</lst> </requestHandler> -->
	<requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" />

	<!-- ping/healthcheck -->
	<requestHandler name="/admin/ping" class="PingRequestHandler">
		<lst name="defaults">
			<str name="qt">standard</str>
			<str name="q">solrpingquery</str>
			<str name="echoParams">all</str>
		</lst>
	</requestHandler>

	<!-- Echo the request contents back to the client -->
	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str> <!-- for all params (including the default etc) use: 'all' -->
			<str name="echoHandler">true</str>
		</lst>
	</requestHandler>

	<!-- config for the admin interface -->
	<admin>
		<defaultQuery>*:*</defaultQuery>
	</admin>

</config>
