<?xml version="1.0"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2013 hybris AG
 All rights reserved.

 This software is the confidential and proprietary information of hybris
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with hybris.

  
-->
<!-- 

This project contains all macros/targets needed for the junit tests

 -->
<project name="project.platformadministration">

	<macrodef name="initialize">
		<sequential>

			<if>
				<istrue value="${enable.init.log}"/>
				<then>
					<record action="start" name="${HYBRIS_LOG_DIR}/ant_initialize.log" />
				</then>
			</if>

			<available file="${ext.core.path}/classes/core/GeneratedTypeInitializer.class" property="coreclasses.present" />
			<available file="${ext.core.path}/bin/coreserver.jar" property="coreclasses.present" />
			<if>
				<equals arg1="${coreclasses.present}" arg2="true" />
				<then>
					<foreachext>
						<do>
							<callback extname="@{extname}" target="before_initialize" />
						</do>
					</foreachext>
					<if>
						<not>
							<isset property="${tenant}" />
						</not>
						<then>
							<input message="Enter valid tenant id" addproperty="tenant" />
						</then>
					</if>
					<yrun>
						<!--de.hybris.platform.core.Initialization.initializeTestSystem();
								  de.hybris.platform.util.RedeployUtilities.shutdown();-->
								de.hybris.ant.taskdefs.AntPerformable p = new de.hybris.ant.taskdefs.InitPlatformAntPerformableImpl("${tenant}");
								p.doPerform();
								de.hybris.platform.util.RedeployUtilities.shutdown();
							</yrun>

					<foreachext>
						<do>
							<callback extname="@{extname}" target="after_initialize" />
						</do>
					</foreachext>
				</then>
				<else>
					<echo message="Cannot initialize the test system - you have to run ant all first" />
				</else>
			</if>

			<if>
				<istrue value="${enable.init.log}"/>
				<then>
					<record action="stop" name="${HYBRIS_LOG_DIR}/ant_initialize.log" />
				</then>
			</if>

		</sequential>
	</macrodef>


	<macrodef name="updatesystem">
		<sequential>
			<if>
				<not>
					<isset property="${tenant}" />
				</not>
				<then>
					<input message="Enter valid tenant id" addproperty="tenant" />
				</then>
			</if>
			<yrun>
					de.hybris.ant.taskdefs.AntPerformable p = new de.hybris.ant.taskdefs.UpdatePlatformAntPerformableImpl("${tenant}");
					p.doPerform();
					de.hybris.platform.util.RedeployUtilities.shutdown();
				</yrun>
		</sequential>
	</macrodef>
	<macrodef name="runcronjob">
		<sequential>
			<available file="${ext.core.path}/classes/core/GeneratedTypeInitializer.class" property="coreclasses.present" />
			<available file="${ext.core.path}/bin/coreserver.jar" property="coreclasses.present" />
			<if>
				<equals arg1="${coreclasses.present}" arg2="true" />
				<then>
					<foreachext>
						<do>
							<callback extname="@{extname}" target="before_initialize" />
						</do>
					</foreachext>
					<input message="Enter existing cron job code" addproperty="cronjob" />
					<if>
						<not>
							<isset property="${tenant}" />
						</not>
						<then>
							<input message="Enter valid tenant id, if you want to use default (master tenant) press enter" addproperty="tenant" />
						</then>
					</if>
					<yrun>
						<!--new de.hybris.platform.core.StartPlatform().startCronJob("${cronjob}");-->
						<!--de.hybris.platform.core.Initialization.initializeTestSystem();
									  de.hybris.platform.util.RedeployUtilities.shutdown();-->
									de.hybris.ant.taskdefs.AntPerformable p = new de.hybris.platform.servicelayer.cronjob.CronJobAntPerformableImpl("${cronjob}","${tenant}");
									p.doPerform();
								</yrun>

					<foreachext>
						<do>
							<callback extname="@{extname}" target="after_initialize" />
						</do>
					</foreachext>
				</then>
				<else>
					<echo message="Cannot initialize the test system - you have to run ant all first" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="clearclusternodes">
		<sequential>
			<echo message="removing all cluster nodes including the current node." />
			<yrun>
				de.hybris.platform.cache.tcp.conf.TCPNodeStoreImpl.removeAllClusterNodes(false);
				de.hybris.platform.util.RedeployUtilities.shutdown();
			</yrun>
		</sequential>
	</macrodef>

	<macrodef name="set_webservice_nature">
		<attribute name="extensionname" />
		<sequential>
			<foreachext>
				<do>
					<if>
						<equals arg1="@{extname}" arg2="@{extensionname}" />
						<then>
							<property name="is.ext" value="true" />
						</then>
					</if>
				</do>
			</foreachext>
			<if>
				<and>
					<not>
						<isset property="${is.ext}" />
					</not>
					<not>
						<equals arg1="true" arg2="${is.ext}" />
					</not>
				</and>
				<then>
					<fail>.
*************************************************************
Entered extension '@{extensionname}' for webservice nature is not in list of extensions for a platform :
${extension.names}
Please verify enetered extension name and/or extension defined in localextension.xml .
*************************************************************
					</fail>
				</then>
			</if>
			<if>
				<equals arg1="@{extensionname}" arg2="platformwebservices" />
				<then>
					<fail>
*************************************************************
To use (default) extension as webservice extension ,
please remove any entries for a key 'webservice.module' from local.properties.
*************************************************************</fail>
				</then>
			</if>
			<echo>Setting webservice nature for an extension @{extensionname}</echo>
			<echo>Setting global flag for a platform webservice extension</echo>
			<if>
				<or>
					<not>
						<isset property="webservice.module" />
					</not>
					<equals arg1="${webservice.module}" arg2="platformwebservices" />
				</or>
				<then>
					<property name="write.local.properties" value="true" />
				</then>
				<else>
					<if>
						<equals arg1="${webservice.module}" arg2="@{extensionname}" />
						<then>
							<echo>!!!The extension '@{extensionname}' has already defined a webservice nature!!!</echo>
						</then>
						<else>
							<fail>
*************************************************************
There is already other extension ${webservice.module} defined as webservice,
please verify it and remove manually 'webservice.module' property from local.properties.
*************************************************************</fail>
						</else>
					</if>
				</else>
			</if>
			<echo>Adopting web.xml for a webservice nature</echo>
			<if>
				<not>
					<available file="${ext.@{extensionname}.path}/web/webroot" />
				</not>
				<then>
					<fail>
*************************************************************
Extension @{extensionname} seems to don not have a web module,
please perform this task on extension with web module.
*************************************************************</fail>
				</then>
			</if>
			<if>
				<available file="${ext.@{extensionname}.path}/web/webroot/WEB-INF/web.xml" />
				<then>
					<echo>
**************************************************************
File web.xml is already existing.It will be replaced with new generated one.
The old web.xml will be stored in web.xml.old.
**************************************************************</echo>
					<move file="${ext.@{extensionname}.path}/web/webroot/WEB-INF/web.xml" tofile="${ext.@{extensionname}.path}/web/webroot/WEB-INF/web.xml.old" />
				</then>
			</if>
			<copy todir="${ext.@{extensionname}.path}/web/webroot/WEB-INF/" verbose="true">
				<fileset dir="${ext.platformwebservices.path}/resources/template/" includes="*web.xml" />
				<filterset>
					<filter token="extension_name" value="@{extensionname}" />
				</filterset>
				<!-- from template-web.xml to web.xml -->
				<mapper>
					<mapper type="regexp" from="(template)-(.*)" to="\2" />
				</mapper>
			</copy>
			<echo>Adopting  @{extensionname}-web-spring.xml for a webservice nature</echo>
			<if>
				<available file="${ext.@{extensionname}.path}/resources/@{extensionname}-web-spring.xml" />
				<then>
					<echo>File @{extensionname}-web-spring.xml is already existing if You want to generate new one please remove current one.</echo>
				</then>
				<else>
					<copy todir="${ext.@{extensionname}.path}/resources" verbose="true">
						<fileset dir="${ext.platformwebservices.path}/resources/template" includes="*web-spring.xml" />

						<filterset>
							<filter token="extension_name" value="@{extensionname}" />
						</filterset>
						<!-- from template-web-spring.xml to extensionname-web-spring.xml -->
						<mapper>
							<mapper type="regexp" from="(template)-(.*)" to="@{extensionname}-\2" />
						</mapper>
					</copy>
				</else>
			</if>
			<if>
				<equals arg1="true" arg2="${write.local.properties}" />
				<then>
					<echo>Setting global flag for a platform webservice extension</echo>
					<echo append="true" file="${HYBRIS_CONFIG_DIR}/local.properties">
#####################################################################################
# 	Global flag for an extension which will be a webservice extension in platform	#
#####################################################################################
webservice.module=@{extensionname}</echo>
					<property name="write.local.properties" value="" />
				</then>
			</if>
			<echo>
**************************************************************
Since now extension '@{extensionname}' will have a nature of webservice,
its web context might be used to hit hybris platform webservice.
**************************************************************
			</echo>
		</sequential>
	</macrodef>



	<macrodef name="clearLockFlag">
		<sequential>
			<echo message="Checking lock flag for the platform" />
			<yrun>
				de.hybris.ant.taskdefs.AntPerformable p = new de.hybris.ant.taskdefs.ClearLockAntPerformable();
				p.doPerform();
			</yrun>
		</sequential>
	</macrodef>

	<macrodef name="startAdminServer">
		<sequential>
			<echo message="Starting AdminServer" />

			<if>
				<os family="windows" />
				<then>
					<exec dir="${platformhome}" executable="cmd.exe" osfamily="windows">
						<arg line="/c" />
						<arg line="hybrisadmin.bat" />
					</exec>
				</then>
				<else>
					<exec dir="${platformhome}" executable="sh" osfamily="unix">
						<arg line="-c ./hybrisadmin.sh" />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="startHybrisServer">
		<sequential>
			<echo message="Checking lock flag for the platform" />

			<if>
				<os family="windows" />
				<then>
					<exec dir="${platformhome}" executable="cmd.exe" osfamily="windows">
						<arg line="/c" />
						<arg line="hybrisserver.bat" />
					</exec>
				</then>
				<else>
					<exec dir="${platformhome}" executable="sh" osfamily="unix">
						<arg line="-c ./hybrisserver.sh" />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>
</project>