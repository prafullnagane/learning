<?xml version="1.0"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2013 hybris AG
 All rights reserved.

 This software is the confidential and proprietary information of hybris
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with hybris.


-->

<project name="platform" default="all" basedir=".">
	<tstamp />
	<property name="platformhome" location="." />

	<import file="${platformhome}/resources/ant/antmacros.xml" />

	<target name="build" description="Builds all extensions">
		<callback extname="" target="before_build" />
		<build />
		<callback extname="" target="after_build" />
	</target>

	<target name="deploy" description="Deploys platform to bundled server. Will copy files of config/tomcat or config/tcServer to config folder of configured bundled server.">
		<callback extname="" target="before_deploy" />
		<deploy />
		<callback extname="" target="after_deploy" />
	</target>

	<target name="ear" description="Builds ear file">
		<callback extname="" target="before_ear" />
		<if>
			<equals arg1="${ear.target.appserver}" arg2="glassfish" />
			<then>
				<property name="glassfish" value="true" />
				<echo message="creating ear using glassfish ear format" />
			</then>
		</if>
		<buildear />
		<callback extname="" target="after_ear" />
	</target>

	<target name="all" depends="build,server" description="executes ant build and ant server">
		<callback extname="" target="before_all" />
		<tstamp prefix="finish">
			<format property="time" pattern="d-MMMM-yyyy HH:mm:ss" locale="en,GB" />
		</tstamp>
		<echo message="Build finished on ${finish.time}.">
		</echo>
		<callback extname="" target="after_all" />
	</target>

	<target name="clean" description="Cleans platform and all extensions">
		<callback extname="" target="before_clean" />
		<clean />
		<callback extname="" target="after_clean" />
	</target>

	<target name="cleanear" description="Cleans ear file">
		<callback extname="" target="before_cleanear" />
		<cleanear />
		<callback extname="" target="after_cleanear" />
	</target>

	<target name="dist" description="Creates a distribution">
		<callback extname="" target="before_dist" />
		<dist include.platform="true" extensions.activated="${extension.names}" extensions.binary="${extension.names}" />
		<callback extname="" target="after_dist" />
	</target>

	<target name="classpathgen" description="Creates a standard platform .classpath file">
		<callback extname="" target="before_classpathgen" />
		<create_platform_classpath_file destinationplatformhome="${platformhome}" />
		<callback extname="" target="after_classpathgen" />
	</target>

	<target name="sourcezip" description="Creates a sourcezip">
		<property name="sourcezip.extensions" value="${extension.names}" />
		<property name="sourcezip.zipfile" value="${HYBRIS_TEMP_DIR}/dists/hybris-sourcezip-${build.version}-${DSTAMP}-${TSTAMP}.zip" />
		<callback extname="" target="before_sourcezip" />
		<sourcezip extensions="${sourcezip.extensions}" zipfile="${sourcezip.zipfile}" />
		<callback extname="" target="after_sourcezip" />
	</target>

	<target name="extgen" description="Runs extgen">
		<callback extname="" target="before_extgen" />
		<extgen_generate />
		<callback extname="" target="after_extgen" />
	</target>

	<target name="modulegen" description="Runs modulegen">
		<callback extname="" target="before_modulegen" />
		<modulegen_generate />
		<callback extname="" target="after_modulegen" />
	</target>

	<target name="initialize" depends="build,server" description="Runs an initialization of the specified tenant in stand-alone mode, using hybris Administration Console default settings. Syntax: ant initialize [-Dtenant].">
		<callback extname="" target="before_initialize" />
		<initialize />
		<callback extname="" target="after_initialize" />
	</target>

	<!-- typeSystemInitialize
	<target name="initializeTypeSystem" description="Runs Type System initialization in stand-alone mode, using hybris Administration Console default settings.">
		<callback extname="" target="before_initializeTypeSystem" />
		<yTypeSystemInit />
		<callback extname="" target="after_initializeTypeSystem" />
	</target>
	-->

	<!-- target name="updateTypeSystem" description="Runs Type System update in stand-alone mode, using hybris Administration Console default settings.">
		<callback extname="" target="before_updateTypeSystem" />
		<yTypeSystemUpdate/>
		<callback extname="" target="after_updateTypeSystem" />
	</target -->
	<target name="server" description="Configures hybris Server and restart if running">
		<callback extname="" target="before_server" />
		<deploy />
		<callback extname="" target="after_server" />
	</target>

	<target name="updatesystem" depends="build,server" description="Performs an update system on master tenant">
		<callback extname="" target="before_updatesystem" />
		<updatesystem />
		<callback extname="" target="after_updatesystem" />
	</target>

	<target name="webservice_nature" description="Provides webservice nature to selected extension">
		<callback extname="" target="before_webservice_nature" />
		<set_webservice_nature extensionname="${extname}" />
		<callback extname="" target="after_webservice_nature" />
	</target>

	<target name="yunitinit" description="Initializes JUnit tenant">
		<callback extname="" target="before_yunitinit" />
		<yunitinit />
		<callback extname="" target="after_yunitinit" />
	</target>


	<!-- new style junit targets, see https://wiki.hybris.com/display/release4/Test+Framework+Enhancements -->
	<target name="unittests" description="executes all unittests">
		<callback extname="" target="before_unittests" />
		<annotationtests annotations="unittests" />
		<callback extname="" target="after_unittests" />
	</target>

	<target name="demotests" description="executes all demotests">
		<callback extname="" target="before_demotests" />
		<annotationtests annotations="demotests" />
		<callback extname="" target="after_demotests" />
	</target>

	<target name="integrationtests" description="executes all integrationtests">
		<callback extname="" target="before_integrationtests" />
		<annotationtests annotations="integrationtests" />
		<callback extname="" target="after_integrationtests" />
	</target>

	<target name="performancetests" description="performancetests">
		<callback extname="" target="before_performancetests" />
		<annotationtests annotations="performancetests" />
		<callback extname="" target="after_performancetests" />
	</target>

	<target name="manualtests" description="executes all manualtests">
		<callback extname="" target="before_manualtests" />
		<annotationtests annotations="manualtests" />
		<callback extname="" target="after_manualtests" />
	</target>

	<target name="bugprooftests" description="executes all bugprooftests">
		<callback extname="" target="before_bugprooftests" />
		<annotationtests annotations="bugprooftests" />
		<callback extname="" target="after_bugprooftests" />
	</target>

	<target name="localizationtest" description="executes the localizationtest to see if all types are properly localized">
		<callback extname="" target="before_localizationtest" />
		<annotationtests packages="*.LocalizationTest" />
		<callback extname="" target="after_localizationtest" />
	</target>

	<target name="typecodetest" description="executes the typecodetest to see if any reserved typecodes are being used">
		<callback extname="" target="before_typecodetest" />
		<annotationtests packages="*.ReservedTypecodeTest" />
		<callback extname="" target="after_typecodetest" />
	</target>

	<target name="alltests" description="executes all tests except manualtests and performancetests">
		<callback extname="" target="before_alltests" />
		<annotationtests annotations="unittests,demotests,integrationtests" />
		<callback extname="" target="after_alltests" />
	</target>

	<target name="yunitweb" description="Runs non-hybris JUnit web tests; that is, all JUnit tests located at 'web/testsrc' folder of an extensions having not package 'de.hybris.platform'">
		<callback extname="" target="before_yunitweb" />
		<yunit_web partner="true" />
		<callback extname="" target="after_yunitweb" />
	</target>

	<target name="yunitweball" description="Runs all JUnit web tests; that is, all JUnit tests located at 'web/testsrc' folder of an extensions">
		<callback extname="" target="before_yunitweball" />
		<yunit_web partner="false" />
		<callback extname="" target="after_yunitweball" />
	</target>

	<target name="updateMavenDependencies" description="Updates all maven dependencies in all extensions">
		<callback extname="" target="before_updateMavenDependencies" />
		<updateAllMavenDependencies />
		<callback extname="" target="after_updateMavenDependencies" />
	</target>

	<target name="testMavenDependencies" description="Test all maven dependencies in platform and all extensions">
		<callback extname="" target="before_testMavenDependencies" />
		<testAllMavenDependencies />
		<callback extname="" target="after_testMavenDependencies" />
	</target>

	<target name="extensionsxml" description="Generates complete extensions.xml file config/generatedextensions.xml  based on current settings of localextensions.xml">
		<callback extname="" target="before_extensionsxml" />
		<generateExtensionsXML />
		<callback extname="" target="after_extensionsxml" />
	</target>

	<target name="generateLicenseOverview" description="Downloads all third party licenses and generates an overview file">
		<callback extname="" target="before_generateLicenseOverview" />
		<generateLicenseOverview />
		<generateWebLicenseOverview />
		<generateNoTransitiveLicenseOverview />
		<callback extname="" target="after_generateLicenseOverview" />
	</target>

	<!-- special hybris targets -->

	<target name="customize" description="Copies all files from '/config/customize' folder to '/bin' folder recursively">
		<callback extname="" target="before_customize" />
		<customize />
		<callback extname="" target="after_customize" />
	</target>

	<target name="production" description="Creates production environment zip's for hybris Server">
		<callback extname="" target="before_production" />
		<production />
		<callback extname="" target="after_production" />
	</target>

	<target name="runcronjob" description="Performs a  cronjob in stand-alone mode. Syntax: ant runcronjob [-Dcronjob] [-Dtenant]. Use -Dcronjob to pass a CronJob code, such as -Dcronjob=MyCronJob. Use quotation marks for CronJob codes with spaces, such as -Dcronjob=&quot;My Cron Job&quot;.">
		<callback extname="" target="before_runcronjob" />
		<runcronjob />
		<callback extname="" target="after_runcronjob" />
	</target>

	<target name="clearAdministrationLock" description="Clears any administration lock, which can be left after unfinsihed system update or initialization. This will work only for cluster node which acquired such a lock.">
		<callback extname="" target="before_clearAdministrationLock" />
		<clearLockFlag />
		<callback extname="" target="after_clearAdministrationLock" />
	</target>

	<target name="startHybrisServer" description="Starts the hybris Server">
		<callback extname="" target="before_startHybrisServer" />
		<startHybrisServer />
		<callback extname="" target="after_startHybrisServer" />
	</target>

	<target name="startAdminServer" description="Starts the hybris AdminServer">
		<callback extname="" target="before_startAdminServer" />
		<startAdminServer />
		<callback extname="" target="after_startAdminServer" />
	</target>


</project>
