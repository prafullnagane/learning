<?xml version="1.0"?>
<!-- [y] hybris Platform Copyright (c) 2000-2013 hybris AG All rights reserved. 
	This software is the confidential and proprietary information of hybris ("Confidential 
	Information"). You shall not disclose such Confidential Information and shall 
	use it only in accordance with the terms of the license agreement you entered 
	into with hybris. -->
<!-- This project contains all macros/targets needed for the junit tests -->
<project name="project.yunit">

	<!-- the next line is added allow eclipse resolving the 'platformhome' property. 
		It is not needed for the normal build process, since platformhome is always 
		set from the outside. -->
	<property name="platformhome" location="../.." />


	<macrodef name="annotationtests" description="run annotated tests">
		<attribute name="extensions" default="" />
		<attribute name="annotations" default="" />
		<attribute name="split" default="" />
		<attribute name="packages" default="" />
		<sequential>
			<delete dir="${HYBRIS_TEMP_DIR}/junit" />
			<mkdir dir="${HYBRIS_TEMP_DIR}/junit" />
			<mkdir dir="${HYBRIS_LOG_DIR}/junit" />

			<!-- start recording -->
			<record action="start" append="true"
				name="${HYBRIS_LOG_DIR}/junit/testing.log" loglevel="info" />

			<prepare />
			<!-- these properties can be overwritten by -Dtestclasses.extensions and 
				-Dtestclasses.annotations and -Dtestclasses.packages and -Dtestclasses.split -->
			<property name="testclasses.extensions" value="@{extensions}" />
			<property name="testclasses.annotations" value="@{annotations}" />
			<property name="testclasses.packages" value="@{packages}" />
			<property name="testclasses.split" value="@{split}" />

			<echo message="Annotations : ${testclasses.annotations}" />
			<echo message="Extensions  : ${testclasses.extensions}" />
			<echo message="Packages    : ${testclasses.packages}" />
			<echo message="JUnit Split : ${testclasses.split}" />

			<!-- Check if there are any tests to test (otherwise don't even boot the 
				platform) -->
			<testClassesUtil property="testlistCheck1" logging="false"
				annotations="${testclasses.annotations}" extensions="${testclasses.extensions}"
				split="${testclasses.split}" packages="${testclasses.packages}" />
			<if>
				<not>
					<equals arg1="" arg2="${testlistCheck1}" />
				</not>
				<then>
					<!-- if only unittests are executed, use standard junit task -->
					<!-- <if>
						<or>
							<contains string="${testclasses.annotations}" substring="alltests" />
							<contains string="${testclasses.annotations}" substring="unittests" />
						</or>
						<then>
							<echo message="Executing unittests outside of platform environment..." />
							<testClassesUtil property="testlist" annotations="unittests"
								extensions="${testclasses.extensions}" split="${testclasses.split}"
								packages="${testclasses.packages}" />
							
							<length string="${build.classpath}" property="classpath.length"  />
							<echo  message="Classpath length : ${classpath.length}" />
							<for param="test" list="${testlist}">
								<sequential>
									<trycatch property="junit_failed" reference="junit_exception">
										<try>
											<junit printsummary="yes" haltonerror="yes" showoutput="yes"
												fork="yes">
												<classpath>
													<pathelement path="${build.classpath}" />
													<fileset dir="${bundled.tomcat.home}/lib">
														<include name="*.jar" />
													</fileset>
												</classpath>
												<formatter type="xml" />
												<test name="@{test}" todir="${HYBRIS_TEMP_DIR}/junit" />
												<syspropertyset>
													<propertyref prefix="HYBRIS_" />
												</syspropertyset>
											</junit>
										</try>
										<catch>
											<property name="junit_exception_property" refid="junit_exception" />
											<echo  message="Exception : ${junit_exception_property}" level="error" />
											<echo  message="Classpath : ${build.classpath}" level="error" />
										</catch>
									</trycatch>
								</sequential>
							</for>
							<copy todir="${HYBRIS_LOG_DIR}/junit">
								<fileset dir="${HYBRIS_TEMP_DIR}/junit">
									<include name="TEST-*.xml" />
								</fileset>
							</copy>
						</then>
					</if> -->

					<!-- execute all other tests inside the hybris platform 
					<if>
						<contains string="${testclasses.annotations}" substring="alltests" />
						<then>
							<property name="allOtherAnnotations" value="integrationtests,demotests" />
						</then>
						<else>
							<if>
								<contains string="${testclasses.annotations}"
									substring="unittests" />
								<then>
									<propertyregex property="allOtherAnnotations"
										input="${testclasses.annotations}" regexp="unittests,|,unittests|unittests"
										replace="" casesensitive="false" />
								</then>
								<else>
									<property name="allOtherAnnotations" value="${testclasses.annotations}" />
								</else>
							</if>
						</else>
					</if>-->

					<!-- Execute all other tests inside of platform >
					<if>
						<not>
							<equals arg1="" arg2="${allOtherAnnotations}" />
						</not>
						<then>
							<echo
								message="Executing ${allOtherAnnotations} tests in platform environment..." />-->
							<yunit reportdir="${HYBRIS_LOG_DIR}/junit" test="${test}"
								additionalclasspath="${bundled.tomcat.home}/lib/servlet-api.jar,${platformhome}/ext/core/lib/log4j-1.2.16.jar">
								<tests>
									<sysproperty key="localizationExtensions" value="${testclasses.extensions}" />
									<sysproperty key="typecodeExtensions" value="${testclasses.extensions}" />
									<sysproperty key="reqIncludedExtensions" value="${testclasses.extensions}" />
									<batchtest fork="yes" annotations="${testclasses.annotations}"
										extensions="${testclasses.extensions}" split="${testclasses.split}"
										packages="${testclasses.packages}" />
								</tests>
							</yunit>
						<!-- </then>
					</if> -->
					<record action="stop" append="false"
						name="${HYBRIS_LOG_DIR}/junit/testing.log" loglevel="info" />
				</then>
				<else>
					<echo level="warn" message="No tests found!" />
				</else>
			</if>
		</sequential>
	</macrodef>

	
	<!-- @deprecated remove this call in the 5.0 version ???? -->
	<macrodef name="yunit_web" description="run all JUnit tests">
		<attribute name="partner" />
		<sequential>
			<prepare />
			<delete dir="${HYBRIS_TEMP_DIR}/testcase" failonerror="false" />
			<foreachext>
				<do>
					<extension_compile_core extname="@{extname}" />
				</do>
			</foreachext>
			<foreachext>
				<do>
					<yunit_web_internal extname="@{extname}"
						partner="@{partner}" />
				</do>
			</foreachext>
		</sequential>
	</macrodef>

	<macrodef name="yunit_web_internal">
		<attribute name="extname" />
		<attribute name="partner" />
		<sequential>
			<if>
				<and>
					<available file="${ext.@{extname}.path}/web/testsrc" />
				</and>
				<then>
					<echo />
					<echo>Testing web module of extension @{extname} (found web/testsrc
						folder)
					</echo>
					<extension_compile_web extname="@{extname}" />

					<yappendtestdir partnerTests="@{partner}"
						testDir="${ext.@{extname}.path}/web/testsrc" target="${HYBRIS_TEMP_DIR}/testcase/testCase-@{extname}.txt" />

					<length property="testcaselength-@{extname}"
						file="${HYBRIS_TEMP_DIR}/testcase/testCase-@{extname}.txt" />
					<if>
						<equals arg1="${testcaselength-@{extname}}" arg2="0" />
						<then>
							<echo
								message="No test files listed for extension @{extname}, skipping test execution"
								level="info" />
						</then>
						<else>
							<pathconvert property="classpath.yunit.@{extname}"
								pathsep=";">
								<fileset dir="${ext.@{extname}.path}/web/webroot">
									<include name="WEB-INF/lib/**.jar" />
								</fileset>

								<path location="${ext.@{extname}.path}/web/webroot/WEB-INF/classes" />
								<path location="${ext.@{extname}.path}/web/testclasses" />
							</pathconvert>

							<yunit reportdir="${HYBRIS_LOG_DIR}/junit/@{extname}" test="${test}"
								additionalclasspath="${classpath.yunit.@{extname}}"
								failbuildonerror="no">
								<tests>
									<batchtest fork="yes">
										<resources>
											<file file="${HYBRIS_TEMP_DIR}/testcase/testCase-@{extname}.txt" />
										</resources>
									</batchtest>
								</tests>
							</yunit>
						</else>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="yunit">
		<attribute name="additionalclasspath" default="" />
		<attribute name="jvmargs"
			default="${standalone.javaoptions} -Ddeployed.server.type=&quot;${bundled.server.type}&quot;" />
		<attribute name="reportdir" default="${HYBRIS_LOG_DIR}/junit" />
		<attribute name="failbuildonerror" default="yes" />
		<attribute name="test" default="" />
		<attribute name="showoutput" default="true" />
		<attribute name="forkmode" default="once" />
		<element name="tests" />
		<sequential>
			
			<echo>jvmargs: @{jvmargs}</echo>
			<foreachext>
				<do>
					<callback extname="@{extname}" target="before_yunit" />
				</do>
			</foreachext>

			<var name="randomnumber" unset="true" />
			<math result="randomnumber">
				<op op="rint" datatype="int">
					<op op="*">
						<num value="10000000" />
						<op op="random" />
					</op>
				</op>
			</math>
			<var name="yrnd" value="yunit${randomnumber}" />

			<delete dir="${HYBRIS_TEMP_DIR}/junit" failonerror="false" />
			<mkdir dir="${HYBRIS_TEMP_DIR}/junit" />
			<mkdir dir="@{reportdir}" />

			<if>
				<contains string="@{test}" substring="." />
				<!--is it a class? -->
				<then>
					<yunitint failureproperty="yuniterr${yrnd}" printsummary="yes"
						haltonfailure="no" fork="yes" reloading="false" forkmode="@{forkmode}"
						showoutput="@{showoutput}" todir="${HYBRIS_TEMP_DIR}/junit"
						platformhome="${platformhome}" additionalclasspath="@{additionalclasspath}">
						<formatter type="xml" />

						<test name="@{test}" />
						<jvmarg line="@{jvmargs}" />
						<syspropertyset>
							<propertyref prefix="HYBRIS_" />
						</syspropertyset>
					</yunitint>
				</then>
				<else>
					<yunitint failureproperty="yuniterr${yrnd}" printsummary="yes"
						haltonfailure="no" fork="yes" reloading="false" forkmode="@{forkmode}"
						showoutput="@{showoutput}" todir="${HYBRIS_TEMP_DIR}/junit"
						platformhome="${platformhome}" additionalclasspath="@{additionalclasspath}">
						<formatter type="xml" />

						<tests />
						<jvmarg line="@{jvmargs}" />
						<syspropertyset>
							<propertyref prefix="HYBRIS_" />
						</syspropertyset>

					</yunitint>
				</else>
			</if>

			<yunitrep todir="@{reportdir}">
				<fileset dir="${HYBRIS_TEMP_DIR}/junit">
					<include name="TEST-*.xml" />
				</fileset>
				<report format="frames" todir="@{reportdir}" />
			</yunitrep>
			<echo message="Report generated to @{reportdir}/index.html" />

			<if>
				<isset property="yuniterr${yrnd}" />
				<then>
					<propertycopy name="yuniterr" from="yuniterr${yrnd}" />
					<echo message="JUNITTESTS FAILED. See @{reportdir}/index.html!" />
					<if>
						<isset property="failbuildonerror" />
						<then>
							<property name="failbuildonerror.real" value="${failbuildonerror}" />
						</then>
						<else>
							<property name="failbuildonerror.real" value="@{failbuildonerror}" />
						</else>
					</if>
					<if>
						<istrue value="${failbuildonerror.real}" />
						<then>
							<echo message="JUNITTESTS FAILED. See @{reportdir}/index.html!" />
						</then>
					</if>
				</then>
			</if>
			<foreachext>
				<do>
					<callback extname="@{extname}" target="after_yunit" />
				</do>
			</foreachext>
		</sequential>
	</macrodef>

	<macrodef name="yunitinit"> <!-- @deprecated remove this call in the 5.0 version ??????? -->
		<sequential>

			<if>
				<istrue value="${enable.init.log}"/>
				<then>
					<record action="start" name="${HYBRIS_LOG_DIR}/ant_yunitinit.log" />
				</then>
			</if>
			
			<available
				file="${ext.core.path}/classes/core/GeneratedTypeInitializer.class"
				property="coreclasses.present" />
			<available file="${ext.core.path}/bin/coreserver.jar"
				property="coreclasses.present" />
			<if>
				<equals arg1="${coreclasses.present}" arg2="true" />
				<then>
					<foreachext>
						<do>
							<callback extname="@{extname}" target="before_yunitinit" />
						</do>
					</foreachext>

					<yrun deployname="junit">
						de.hybris.platform.core.Initialization.initializeTestSystem();
						de.hybris.platform.util.RedeployUtilities.shutdown();
					</yrun>

					<foreachext>
						<do>
							<callback extname="@{extname}" target="after_yunitinit" />
						</do>
					</foreachext>
				</then>
				<else>
					<echo
						message="Cannot initialize the test system - you have to run ant all first" />
				</else>
			</if>

			<if>
				<istrue value="${enable.init.log}"/>
				<then>
					<record action="stop" name="${HYBRIS_LOG_DIR}/ant_yunitinit.log" />
				</then>
			</if>

		</sequential>
	</macrodef>

	<macrodef name="extension_yunit">
		<attribute name="extname" />
		<sequential>
			<prepare />
			<extension_compile_core extname="@{extname}" />
			<if>
				<isset property="ext.@{extname}.coremodule.available" />
				<then>
					<yunit reportdir="${ext.@{extname}.path}/doc/junit" test="${test}">
						<tests>
							<batchtest fork="yes">
								<fileset dir="${ext.@{extname}.path}/testsrc">
									<include name="**/*.java" />
								</fileset>
							</batchtest>
						</tests>
					</yunit>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="extension_yunitweb">
		<attribute name="extname" />
		<sequential>
			<prepare />
			<delete dir="${HYBRIS_TEMP_DIR}/testcase" failonerror="false" />
			<extension_compile_core extname="@{extname}" />
			<yunit_web_internal extname="@{extname}" partner="false" />
		</sequential>
	</macrodef>

</project>