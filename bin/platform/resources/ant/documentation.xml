<?xml version="1.0"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2013 hybris AG
 All rights reserved.

 This software is the confidential and proprietary information of hybris
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with hybris.

  
-->
<!-- 

XXXX

 -->
<project name="project.documentation">
	
	<macrodef name="addToPackageset">
		<attribute name="packagesetproperty" />
		<attribute name="path" />
		<sequential>
			<echo message="checking @{path}" />
			<if>
				<available file="@{path}" type="dir" />
				<then>
					<if>
						<equals arg1="${@{packagesetproperty}}" arg2="" />
						<then>
							<var name="@{packagesetproperty}" value="@{path}" />
						</then>
						<else>
							<var name="@{packagesetproperty}" value="${@{packagesetproperty}};@{path}" />
						</else>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>
	
	<macrodef name="extension_api">
		<attribute name="extname" />
		<sequential>
			<var name="packageset" value="" />
			
			<!-- For an extension sources are in the following pathes, 
			     they will be add to $packageset IF this folder exists! -->		
			<addToPackageset packagesetproperty="packageset" path="${ext.@{extname}.path}/src" />
			<addToPackageset packagesetproperty="packageset" path="${ext.@{extname}.path}/gensrc" />
			<addToPackageset packagesetproperty="packageset" path="${ext.@{extname}.path}/web/src" />
			
			<echo message="Generating api doc for @{extname}... " />
			<javadoc destdir="${ext.@{extname}.path}/doc/api" version="true" author="false" use="true" 
				windowtitle="@{extname} - API" doctitle="&lt;h2&gt;@{extname} - hybris Platform &lt;/h2&gt;" 
				bottom="&lt;i&gt;Copyright &#169; 2000-2011 hybris AG. All Rights Reserved.&lt;/i&gt;" maxmemory="128m" useexternalfile="true">
				
				<arg value="-J-Xmx500M" />

				<classpath>
					<pathelement path="${build.classpath}" />
					<fileset dir="${ext.@{extname}.path}" >
						<!-- IF the webcontext contains some libs which are exclusively used only for /web/src - they are included here only - in the apidoc they aren't linked -->
						<include name="web/webroot/WEB-INF/lib/**.jar" />
					</fileset>
					<fileset dir="${bundled.tomcat.home}">
						<include name="lib/**.jar" />
					</fileset>
				</classpath>

				<link href="${j2se.api.link}" />
				<link href="${j2ee.api.link}" />
				<link href="${commons-collections.api.link}" />
				<link href="${lucene.api.link}" />
				<link href="${hybris.platform.api.link}" />

				<tag description="Spring Bean ID: " name="spring.bean" />
				
				<sourcepath path="${packageset}" />
				
				<!-- 
					Attention here, the only package which is exactly the same as the extensionname contains the GeneratedTypeInitializer
					Hopefully noone gets the idea to use a package declaration exactly the same as the extension name
				 --> 
				<excludepackage name="@{extname}"/>	
				
			</javadoc>
		</sequential>
	</macrodef>
	

	<macrodef name="extension_uml">
			<attribute name="extname" />
			<attribute name="mode" default="normal" />
			<sequential>

				<!-- ugly way to check for existence of a file using a wildcard... -->
				<pathconvert property="jarfound" setonempty="false" pathsep=" ">
					<path>
						<fileset dir="${platformhome}/lib" includes="yuml-*.jar" />
					</path>
				</pathconvert>


				<if>
					<isset property="jarfound" />
					<then>
						<java fork="true" classname="de.hybris.anttasks.main.Main">
							<arg value="-@{mode}" />
							<arg value="${ext.@{extname}.path}/resources/@{extname}-items.xml" />
							<arg value="${ext.@{extname}.path}/resources/uml" />
							<arg value="@{extname}-@{mode}" />
							<classpath>
								<fileset dir="${platformhome}/lib">
									<include name="yuml-*.jar" />
								</fileset>
							</classpath>
						</java>
					</then>
					<else>
						<echo>
	****************************************************************

	  The UML plugin can not be used from within a binary release!
	  Please use the hybris UML Service instead!

	****************************************************************
							</echo>
					</else>
				</if>
			</sequential>
		</macrodef>

		<macrodef name="extension_clean_uml">
			<attribute name="extname" />
			<sequential>
				<delete dir="${ext.@{extname}.path}/resources/uml" failonerror="false" />
			</sequential>
		</macrodef>
	
</project>