<?xml version="1.0"?>
<!-- [y] hybris Platform Copyright (c) 2000-2013 hybris AG All rights reserved. 
	This software is the confidential and proprietary information of hybris ("Confidential 
	Information"). You shall not disclose such Confidential Information and shall 
	use it only in accordance with the terms of the license agreement you entered 
	into with hybris. -->

<project name="mavenTasks" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<property name="platformhome" value="${basedir}/../.." />

	<typedef resource="org/apache/maven/artifact/ant/antlib.xml"
		uri="antlib:org.apache.maven.artifact.ant">
		<classpath>
			<pathelement
				path="${platformhome}/resources/ant/lib/maven-ant-tasks-2.1.1.jar" />
		</classpath>
	</typedef>

	<macrodef name="deleteJars" description="deletes all jar files in the lib folder">
		<attribute name="libfolder" />
		<sequential>
			<echo message="cleaning library folder @{libfolder}" />
			<delete failonerror="false" dir="@{libfolder}">
				<fileset dir="@{libfolder}" includes="*.jar" />
			</delete>

		</sequential>
	</macrodef>

	<macrodef name="testAllMavenDependencies">
		<sequential>
			<!-- testing platform/lib and platform/lib/dbdriver -->
			<echo
				message="testing maven dependencies for platform/lib and platform/lib/dbdriver" />

			<updateLibFolder libfolder="${platformhome}/lib/mavenJars"
				dependencyfile="${platformhome}/lib/external-dependencies.xml" />
			<compareLibraryFolder foldera="${platformhome}/lib"
				folderb="${platformhome}/lib/mavenJars" />

			<updateLibFolder libfolder="${platformhome}/lib/dbdriver/mavenJars"
				dependencyfile="${platformhome}/lib/dbdriver/external-dependencies.xml" />
			<compareLibraryFolder foldera="${platformhome}/lib/dbdriver"
				folderb="${platformhome}/lib/dbdriver/mavenJars" />

			<!-- the following cannot be called from platform root, OutOfMemoryException 
				while processing! -->
			<foreachext>
				<do>
					<testMavenDependencies extname="@{extname}" />
				</do>
			</foreachext>
		</sequential>
	</macrodef>

	<macrodef name="testMavenDependencies">
		<attribute name="extname" />
		<sequential>
			<!-- testing extension/lib -->
			<if>
				<available file="${ext.@{extname}.path}/external-dependencies.xml" />
				<then>
					<echo message="testing maven dependencies : ${ext.@{extname}.path}/lib " />
					<updateLibFolder libfolder="${ext.@{extname}.path}/lib/mavenJars"
						dependencyfile="${ext.@{extname}.path}/external-dependencies.xml" />
					<compareLibraryFolder foldera="${ext.@{extname}.path}/lib"
						folderb="${ext.@{extname}.path}/lib/mavenJars" />
				</then>
				<elseif>
					<available file="${ext.@{extname}.path}/lib" />
					<then>
						<echo level="error"
							message="${ext.@{extname}.path}/lib exists but no ${ext.@{extname}.path}/external-dependencies.xml was not found!" />
					</then>
				</elseif>
			</if>

			<if> <!-- testing extension/web/webroot/WEB-INF/lib -->
				<available
					file="${ext.@{extname}.path}/web/webroot/WEB-INF/external-dependencies.xml" />
				<then>
					<echo
						message="testing maven dependencies : ${ext.@{extname}.path}/web/webroot/WEB-INF/lib " />
					<updateLibFolder
						libfolder="${ext.@{extname}.path}/web/webroot/WEB-INF/lib/mavenJars"
						dependencyfile="${ext.@{extname}.path}/web/webroot/WEB-INF/external-dependencies.xml" />
					<compareLibraryFolder
						foldera="${ext.@{extname}.path}/web/webroot/WEB-INF/lib" folderb="${ext.@{extname}.path}/web/webroot/WEB-INF/lib/mavenJars" />
				</then>
				<elseif>
					<available file="${ext.@{extname}.path}/web/webroot/WEB-INF/lib" />
					<then>
						<echo level="warn"
							message="${ext.@{extname}.path}/web/webroot/WEB-INF/lib exists but no ${ext.@{extname}.path}/web/webroot/WEB-INF/external-dependencies.xml was not found!" />
					</then>
				</elseif>
			</if>

		</sequential>
	</macrodef>


	<macrodef name="updateAllMavenDependencies">
		<sequential>
			<foreachext>
				<do>
					<updateMavenDependencies extname="@{extname}" />
				</do>
			</foreachext>
		</sequential>
	</macrodef>

	<macrodef name="updateLibFolder">
		<attribute name="libfolder" />
		<attribute name="dependencyFile" />
		<sequential>
			<deleteJars libfolder="@{libfolder}" />
			<mkdir dir="@{libfolder}" />
			<artifact:mvn pom="@{dependencyFile}" fork="true">
				<arg value="dependency:copy-dependencies" />
				<arg value="-DoutputDirectory=@{libfolder}" />
				<arg value="-DoverWriteReleases=true" />
				<arg value="-DoverWriteSnapshots=true" />
				<arg value="-DoverWriteIfNewer=true" />
				<arg value="-DexcludeTransitive=true" />
			</artifact:mvn>
		</sequential>
	</macrodef>

	<macrodef name="updateMavenDependencies"
		description="copies all maven dependencies to the lib folder">
		<attribute name="extname" default="" />
		<sequential>
			<!-- lib folder -->
			<if>
				<available file="${ext.@{extname}.path}/external-dependencies.xml" />
				<then>
					<updateLibFolder libfolder="${ext.@{extname}.path}/lib"
						dependencyfile="${ext.@{extname}.path}/external-dependencies.xml" />
				</then>
				<else>
					<echo level="warn"
						message="${ext.@{extname}.path}/external-dependencies.xml was not found!" />
				</else>
			</if>

			<!-- WEB-INF/lib folder -->
			<if>
				<available
					file="${ext.@{extname}.path}/web/webroot/WEB-INF/external-dependencies.xml" />
				<then>
					<updateLibFolder libfolder="${ext.@{extname}.path}/web/webroot/WEB-INF/lib"
						dependencyfile="${ext.@{extname}.path}/web/webroot/WEB-INF/external-dependencies.xml" />
				</then>
				<else>
					<echo level="warn"
						message="${ext.@{extname}.path}/web/webroot/WEB-INF/external-dependencies.xml was not found!" />
				</else>
			</if>
		</sequential>
	</macrodef>


	<macrodef name="compareLibraryFolder">
		<attribute name="folderA" />
		<attribute name="folderB" />
		<sequential>
			<fileset dir="@{folderA}" includes="*.jar" id="differences">
				<different targetdir="@{folderB}" ignoreFileTimes="true" />
				<present present="both" targetdir="@{folderB}" />
			</fileset>

			<fileset dir="@{folderA}" includes="*.jar" id="presentAtoB">
				<present present="srconly" targetdir="@{folderB}" />
			</fileset>

			<fileset dir="@{folderB}" includes="*.jar" id="presentBtoA">
				<present present="srconly" targetdir="@{folderA}" />
			</fileset>

			<if>
				<not>
					<equals arg1="" arg2="${toString:differences}" />
				</not>
				<then>
					<echo taskname="LibraryComparer" message=" " />
					<echo taskname="LibraryComparer"
						message="########################################################" />
					<echo taskname="LibraryComparer"
						message="| File content is different in the following jars :" />
					<for param="library" list="${toString:differences}" delimiter=";">
						<sequential>
							<echo taskname="LibraryComparer" message="|-- @{library}" />
						</sequential>
					</for>
					<echo taskname="LibraryComparer"
						message="########################################################" />
				</then>
			</if>

			<if>
				<not>
					<equals arg1="" arg2="${toString:presentAtoB}" />
				</not>
				<then>
					<echo taskname="LibraryComparer"
						message="#########################################################" />
					<echo taskname="LibraryComparer" message="# Only available in @{folderA} : " />
					<for param="library" list="${toString:presentAtoB}" delimiter=";">
						<sequential>
							<echo taskname="LibraryComparer" message="# |-- @{library}" />
						</sequential>
					</for>
					<echo taskname="LibraryComparer"
						message="#########################################################" />
				</then>
			</if>


			<if>
				<not>
					<equals arg1="" arg2="${toString:presentBtoA}" />
				</not>
				<then>
					<echo taskname="LibraryComparer"
						message="#########################################################" />
					<echo taskname="LibraryComparer" message="# Only available in @{folderB} : " />
					<for param="library" list="${toString:presentBtoA}" delimiter=";">
						<sequential>
							<echo taskname="LibraryComparer" message="# |-- @{library}" />
						</sequential>
					</for>
					<echo taskname="LibraryComparer"
						message="#########################################################" />
				</then>
			</if>

			<if>
				<and>
					<equals arg1="" arg2="${toString:differences}" />
					<equals arg1="" arg2="${toString:presentAtoB}" />
					<equals arg1="" arg2="${toString:presentBtoA}" />
				</and>
				<then>
					<echo taskname="LibraryComparer"
						message="#########################################################" />
					<echo taskname="LibraryComparer" message="# Checked Libs in @{folderA} - ok" />
					<echo taskname="LibraryComparer"
						message="#########################################################" />
					<deleteJars libfolder="@{folderB}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="generateLicenseOverview">
		<sequential>
			<delete dir="${HYBRIS_LOG_FOLDER}/licences" />		
			<foreachext>
				<do>
					<artifact:mvn pom="${ext.@{extname}.path}/external-dependencies.xml"  mavenHome="${platformhome}/apache-maven-3.0.3"
						fork="true">
						<arg value="license:add-third-party" />
						<arg value="-Dlicense.outputDirectory=${HYBRIS_LOG_DIR}/licences" />
						<arg value="-Dlicense.thirdPartyFilename=@{extname}-licenses.txt" />
					</artifact:mvn>
					
					<!-- append to complete file -->
					<concat destfile="${HYBRIS_LOG_DIR}/licences/_all-licenses.txt" append="true">
#########################################################################
## @{extname}
#########################################################################

</concat>
					<concat destfile="${HYBRIS_LOG_DIR}/licences/_all-licenses.txt" append="true">
						<fileset file="${HYBRIS_LOG_DIR}/licences/@{extname}-licenses.txt" />
					</concat>
				</do>
			</foreachext>
			
		</sequential>
	</macrodef>
	
	<macrodef name="generateWebLicenseOverview">
		<sequential>
			<foreachext>
				<do>
					<artifact:mvn pom="${ext.@{extname}.path}/web/webroot/WEB-INF/external-dependencies.xml"  mavenHome="${platformhome}/apache-maven-3.0.3"
					fork="true">
						<arg value="license:add-third-party" />
						<arg value="-Dlicense.outputDirectory=${HYBRIS_LOG_DIR}/licences" />
						<arg value="-Dlicense.thirdPartyFilename=@{extname}-weblicenses.txt" />
					</artifact:mvn>
													
					<!-- append to complete file -->
					<concat destfile="${HYBRIS_LOG_DIR}/licences/_all-licenses.txt" append="true">
#########################################################################
## @{extname}/web-inf
#########################################################################

</concat>
					<concat destfile="${HYBRIS_LOG_DIR}/licences/_all-licenses.txt" append="true">
						<fileset file="${HYBRIS_LOG_DIR}/licences/@{extname}-weblicenses.txt" />
					</concat>
				</do>
			</foreachext>
		</sequential>
	</macrodef>
	
	<macrodef name="generateNoTransitiveLicenseOverview">
		<sequential>
			<if>
				<available file="${HYBRIS_LOG_DIR}\licences\_all-licenses.txt"/>
				<then>
					<exec dir="${env.JAVA_HOME}" executable="java.exe">
						<arg line="-jar ${platformhome}/resources/ant/lib/notranisitives-1.0.jar ${platformhome}/../ ${HYBRIS_LOG_DIR}\licences\_all-licenses.txt"/>
					</exec>
				</then>
			</if>
		</sequential>
	</macrodef>
</project>
